#!/usr/local/gnu/bin/perl -T

# mirexport.pl
#
# The new ftp miriad update procedure precludes users from
# running mirexport themselves. This suid script remedies that
#
# run as:
# 
# mirexport.pl <system_id>
#
# NOTE: changes to the scripts/unix/sun4sol/mirexport.pl do NOT 
# cause $MIRBIN/mirexport.pl to be updated. So if you change the script,
# you have to propagate it by hand AND THEN reset the execution
# permissions to suid/sgid
#
# DPR 03-01-01
#

# set the path explicitly

$ENV{PATH}='/u/mirmgr/bin:/nfs/applic/miriad/bin/sun4sol:/usr/local/gnu/bin:/usr/local/bin:/usr/local/site/bin:/usr/openwin/bin:/usr/openwin/demo:/usr/local/X11R5/bin:/usr/local/X11/bin:/usr/local/texmf/bin:/usr/ccs/bin:/opt/SUNWspro/bin:/sbin:/usr/sbin:/usr/bin:/usr/ucb:/usr/local/av/bin';

delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

my $id=$ARGV[0];

my @file_list=`ls -1 /nfs/applic/miriad/export/Last_update_*`;

#
# Find the file which matches the given id
#

my @found_files = grep {
    /Last_update_$id$/;
} map {
    # remove trailing cr
    my $tmp=$_;
    chomp $tmp;
    {$tmp};
} @file_list;

if (scalar(@found_files) == 0) {
    print "ERROR: There is no file Last_update_$id\!\n\n";
    print "If this is a new id, you have to get your friendly miriad\n";
    print "manager to create it for you.\n\n";
    print "Email miriad\@atnf.csiro.au\n";
    die;
} elsif (scalar(@found_files) != 1) {
    print  "ERROR: There were multiple Last_update_\* files found for $id\!\n\n";
    print "This should never happen...\n";
    print "Please email miriad\@atnf.csiro.au\n";
    die;
} else {
    # we're clean - detaint
    $id=~/(\S+)/;
    my $cleanid=$1;
    die "Error: somehow \$cleanid=$cleanid is tained" if is_tainted($cleanid);
    print "ok to export...\n";
    $< = $>;  # force uid=euid
    $( = $);  # force gid=egid
    exec "/nfs/applic/miriad/bin/sun4sol/mirexport $cleanid";
#    exec "/u/mirmgr/bin/test.csh";
}

sub is_tainted {
    return ! eval {
	join('',@_), kill 0;
	1;
    };
}
