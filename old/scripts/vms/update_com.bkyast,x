$ ! A command procedure to perform any necessary updating of Werong or
$ ! Mirth programs.
$
$! History:
$!    mchw 09nov90  Commented out the following line in 40:
$!	libs = libs + ",sys$library:vaxcrtl/lib"
$!    mchw 20jan91  Added mongo to plotlibs
$!    mchw 03apr91  Problem with Mongo sharable library superceding
$!			previous subroutines, e.g. "process" in uvmodel
$!			so removed mongo from plotlibs again.
$!    mchw 29oct91  Removed vaxcrtl/lib from tools after lable 35:
$!    rjs  09aug93  Added processing of ".f2c" files.
$
$ ! Make symbols for the relavant libraries.
$
$ plotlibs = "bkyast$dua1:[graph.pgplot]grpshr/lib" 
$! plotlibs = "bkyast$dua1:[graph.pgplot]grpshr/lib"
$!		",bkyast$dua1:[graph.pl.86]mongo/opt"

$ ivaslibs =  "bkyast$dua1:[graph.ivas.ivas.bin.lib]ivas/lib" + -
	     ",bkyast$dua1:[graph.ivas.xanth.bin.lib]xanth/lib" + -
	     ",sys$common:[multinet.lib]lib/lib"
$
$ ! Inputs:
$ !   P1	A file containing a list of programs or subroutines to
$ !		update.
$
$	default = f$environment("default")
$	say = "write sys$output"
$	status = 12
$	on error then goto 60
$	on control_y then goto 60
$	open/read updates 'p1'
$
$! Make sure all the libraries are there.
$
$ if f$search("mirlib:libmir.olb").eqs."" then lib/create mirlib:libmir
$ if f$search("mirlib:libmir.mlb").eqs."" then lib/create/macro mirlib:libmir
$ if f$search("mirlib:libdbg.olb").eqs."" then lib/create mirlib:libdbg
$
$ ! Process the files.
$ ! "Mode" should be either "wprog", "wsubs", "mprog" or "msubs" meaning
$ ! Werong or Mirth program or subroutine. These four cases get treated
$ ! differently.
$
$10:	read/end=50 updates line
$	in = f$element(0," ",line)
$	type = f$parse(in,,,"type")
$	if (type.eqs.".H") then goto 10
$	mode = f$element(1," ",line)
$	mode = f$element(0,"/",mode)
$
$	directory = f$parse(in,,,"device") + f$parse(in,,,"directory")
$	name = f$parse(in,,,"name")
$	version = f$parse(in,,,"version")
$	tv = f$extract(0,2,name).eqs."TV"
$
$ ! Compile the piece of code.
$
$	set default 'directory'
$	if (type.nes.".MAR") then goto 11
$	say "$ macro ",in
$	if (mode.eqs."msubs") then macro/object=junk 'in'+mirlib:libmir/lib
$	if (mode.eqs."msubs") then macro/enable=debug/object=junk.dbg 'in'+mirlib:libmir/lib
$	if (mode.eqs."tools") then goto 16
$	goto 20
$11:	if (type.nes.".F2C") then goto 110
$	say "$ intf2c ",in
$	intf2c -s vaxc 'in' 'name'.TMP
$	in = name + ".TMP"
$	type = ".C"
$110:	if (type.nes.".C") then goto 12
$	say "$ cc/precision=single ",name
$	if f$locate("TCP",in).eq.f$length(in) then goto 111
$	define/nolog/user sys sys$common:[multinet.include.sys]
$	define/nolog/user arpa sys$common:[multinet.include.arpa]
$	define/nolog/user netinet sys$common:[multinet.include.netinet]
$	define/nolog/user vaxc$include sys$common:[multinet.include],sys$library:
$111:	cc/include=mirinc/object=junk/precision=single 'in'
$	if (mode.eqs."msubs") then cc/include=mirinc/debug/nooptimize/object=junk.dbg/precision=single 'in'
$	goto 20
$12:	if (type.nes.".MSG") then goto 13
$	say "$ message ",in
$	message/object=junk 'in'
$	if (mode.eqs."msubs") then copy junk.obj junk.dbg
$	goto 20
$13:	if (type.nes.".FOR") then goto 14
$	say "$ ratty ",in
$	ratty -s vms -I MIRINC: 'in' junk.rat
$	fortran junk.rat
$	if (mode.eqs."msubs") then -
		fortran/nooptimize/check/debug/object=junk.dbg junk.rat
$	goto 20
$14:	if (type.nes.".MACRO") then goto 15
$	say "$ library/macro mirlib:libmir.mlb ",in
$	library/macro mirlib:libmir 'in'
$	goto 10
$
$15:	if (type.nes.".COM") then goto 16
$	in = in - version
$	say "$ copy ",in," mirbin:"
$	copy 'in' mirbin:
$	goto 10
$
$! No match.
$
$16:	say "%UPDATE-W-IGNORE, ignoring ",in
$	goto 10
$
$ ! If its a subroutine, add it to the appropriate library.
$
$20:	if (mode.nes."msubs") then goto 35
$	say "$ library mirlib:libmir ",name
$	library mirlib:libmir junk
$	library mirlib:libdbg junk.dbg
$	goto 10
$
$!  If its a tool of some description, link it.
$
$35:	if (mode.nes."tools") then goto 40
$!	libs = ",mirlib:libmir/lib,sys$library:vaxcrtl/lib"
$	libs = ",mirlib:libmir/lib"
$	if (type.eqs.".C") then lib = ",sys$library:vaxcrtl/lib"
$	say "$ link ",name,libs
$	link/exe=mirbin:'name' junk'libs'
$	goto 10
$
$ ! If its a program, link it with the appropriate library.
$ ! Determine the libraries needed in the linking stage.
$
$40:	libs = ",mirlib:libmir/lib," + plotlibs
$	if (tv) then libs = libs + "," + ivaslibs
$!	libs = libs + ",sys$library:vaxcrtl/lib"
$	say "$ link ",name,libs
$	link/notrace/exe=mirbin:'name' junk'libs'
$	goto 10
$
$50:	close updates
$	status = 1
$
$ ! Clean up everything and exit.
$
$60:	if .not.'$status' then status = '$status'
$	set default 'default'
$	if f$logical("updates").nes."" then close updates
$	exit 'status'
